#!/usr/local/bin/perl

use strict;
use warnings FATAL => 'all';

use lib qw( ../lib );

use Try::Tiny;
use Data::Dumper;

use Getopt::Long;
use AppConfig ( qw( :expand :argcount ) );;

use File::Spec::Functions (qw( catdir catfile ));
use File::HomeDir ();

use Module::Cooker;

my $VERSION = '0.1_1';

my $mc_dir = try {
    return unless my $dir = File::HomeDir->my_home;
    my $path = catfile( $dir, 'modcook' );
    -d $path ? return $path : return;
}
catch {
    warn "Can not get user's home directory: $_\n";
    return;
};

#my $extravars = {};

# anything not in this list is meant to be a modcooker param as opposed
# to being a param passed to the M::C constructor.
my %mc_params = (
    minperl   => undef,
    package   => undef,
    version   => undef,
    author    => undef,
    email     => undef,
    profile   => undef,
    nosubs    => undef,
    localdirs => undef,
);

my $cfg = AppConfig->new(
    qw(
      minperl=s
      package=s
      version=s
      author=s
      email=s
      profile=s
      nosubs
      extravars=s% )
);
$cfg->define( 'localdirs=s@' => { EXPAND => EXPAND_UID } );

# read a local config file if it exists
$cfg->file(catfile($mc_dir,'modcook.cfg')) if $mc_dir;
my @initial_dirs = @{$cfg->localdirs};

# and add in anything from the command line
$cfg->getopt();

my %cfgopts = $cfg->varlist("^.+");

# this addresses a major drawback with other config files
if ( grep( /^replace$/, @{$cfgopts{localdirs}} ) ) {
    shift(@{$cfgopts{localdirs}}) for ( 1 .. @initial_dirs );
    my @tmp = grep !/^replace$/, @{$cfgopts{localdirs}};
    $cfgopts{localdirs} = \@tmp;
}

print "Before:\n";
print 'Options - ' . Dumper(\%cfgopts);
print 'MC params - ' . Dumper( \%mc_params );

for ( keys(%mc_params) ) {
    ( delete( $mc_params{$_} ), next )
      unless defined( $cfgopts{$_} );
    $mc_params{$_} = delete( $cfgopts{$_} );
}

print "\nAfter:\n";
print 'Options - ' . Dumper(\%cfgopts);
print 'MC params - ' . Dumper( \%mc_params );

my $mc = Module::Cooker->new(%mc_params);

print "\nObject values:\n";
print Dumper( \%{ $mc->summary } );
exit;

$mc->cook();

exit;

__END__

=head1 NAME

modcooker - Create skeleton module packages from templates

=head1 SYNOPSIS

=cut

